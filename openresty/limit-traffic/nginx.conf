#user  nobody;
#worker_processes 1;
worker_rlimit_nofile 65535;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 开启debug级别日志，否则ngx.log不能输出debug级别日志
# https://stackoverflow.com/questions/55975325/nothing-is-written-to-nginx-access-log-error-log-how-to-troubleshoot
error_log  logs/error.log  warn;

#pid        logs/nginx.pid;

events {
    worker_connections  65535;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # Module ngx_http_gzip_module
    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip
    #
    # 启用支持gzip
    gzip on;
    # Sets the minimum length of a response that will be gzipped. The length is determined only from the “Content-Length” response header field.
    gzip_min_length 1k;
    # Sets the number and size of buffers used to compress a response. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
    gzip_buffers 20 8k;
    gzip_http_version 1.1;
    gzip_comp_level 6;
    gzip_types application/json text/plain application/javascript text/css application/xml;
    gzip_vary on;	

    server_tokens off;	
    autoindex off;	
    # 关闭访问日志
    access_log off;	

    # Nginx分配给请求数据的Buffer大小，如果请求的数据小于client_body_buffer_size直接将数据先在内存中存储。如果请求的值大于client_body_buffer_size小于client_max_body_size，就会将数据先存储到临时文件中，在哪个临时文件中呢？client_body_temp 指定的路径中，默认该路径值是/tmp/
    # https://blog.csdn.net/feifeixiang2835/article/details/84964036
    client_body_buffer_size 128k;

    # client_max_body_size 默认 1M，表示 客户端请求服务器最大允许大小，在“Content-Length”请求头中指定。如果请求的正文数据大于client_max_body_size，HTTP协议会报错 413 Request Entity Too Large。就是说如果请求的正文大于client_max_body_size，一定是失败的。如果需要上传大文件，一定要修改该值。
    # https://blog.csdn.net/feifeixiang2835/article/details/84964036
    client_max_body_size 256k;

    # nginx配置参数解释：client_header_buffer_size、large_client_header_buffers
    # https://blog.csdn.net/kenzo2017/article/details/105877846/
    #
    # 请求行+请求头的标准大小为1k
    client_header_buffer_size 1k;
    # 请求行+请求头的最大大小为16k
    large_client_header_buffers 2 8k;

    gzip_proxied any;

    # 设置require自定义lua库搜索路径，否则会报告not found错误
    # https://www.cnblogs.com/mentalidade/p/6958326.html
    lua_package_path "/usr/local/openresty/nginx/conf/lua/?.lua;;;";
    lua_shared_dict my_limit_conn_store 100m;
    lua_shared_dict my_limit_req_store 100m;
    lua_shared_dict recordStore 100m;
    lua_shared_dict logFrequencyStore 100m;

    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=2g use_temp_path=off;

    log_by_lua_block {
        local ctx = ngx.ctx
        local lim = ctx.limit_conn
        if lim then
                -- if you are using an upstream module in the content phase,
                -- then you probably want to use $upstream_response_time
                -- instead of ($request_time - ctx.limit_conn_delay) below.
                local latency = tonumber(ngx.var.request_time) - ctx.limit_conn_delay
                local clientIp = ctx.limit_conn_key
                assert(clientIp)
                local conn, err = lim:leaving(clientIp, latency)
                if not conn then
                        ngx.log(ngx.ERR, "failed to record the connection leaving ", "request: ", err)
                        return
                end 
        end 
    }
  
    include /etc/nginx/conf.d/*.conf;

    server {
    	listen       80;
    	server_name  localhost;
	
    	location / {
	 	access_by_lua_file conf/lua/my_limit.lua;
 		content_by_lua_block {
			ngx.sleep(0.5);
			ngx.header.content_type = "text/plain";
			ngx.say("Hello Dexterleslie.");
		}
    	}

    	error_page   500 502 503 504  /50x.html;
    	location = /50x.html {
        	root   /usr/local/openresty/nginx/html;
    	}
    }

    server {
	listen 30010;
	server_name statistic_server;
	
	location / {
		access_by_lua_file conf/lua/my_limit.lua;
		content_by_lua_block {
			local common = require("my_common");
			local clientIp = common.getClientIp();
			ngx.header.content_type = "text/plain;charset=utf-8";
			local keys = ngx.shared.recordStore:get_keys();
			local response = "你的ip地址:" .. clientIp .. "，ip黑名单如下:<br/>";
			for k,v in pairs(keys) do
				local isStartsWith = v:find("^blocked#");
				if isStartsWith then
					response = response .. v .. "<br/>";
				end
			end
			ngx.header.content_type = "text/html;charset=utf-8";
                        ngx.say(response);
		}
	}
    }
}
